[{"line":2,"elements":[{"line":4,"name":"","description":"","type":"background","keyword":"Background","steps":[{"name":"url demoBaseUrl","result":{"duration":29948125,"error_message":"com.intuit.karate.exception.KarateException: -unknown-:6 - evaluation (js) failed: demoBaseUrl, javax.script.ScriptException: ReferenceError: \"demoBaseUrl\" is not defined in <eval> at line number 1\nstack trace: jdk.scripting.nashorn\/jdk.nashorn.api.scripting.NashornScriptEngine.throwAsScriptException(NashornScriptEngine.java:477)","status":"failed"},"match":{"location":"karate","arguments":[]},"keyword":"Given","line":6,"doc_string":{"content_type":"","value":"21:18:16.958 skipping bootstrap configuration: could not find or read file: classpath:karate-config.js","line":6}},{"name":"path 'greeting', 'reset'","result":{"duration":0,"status":"skipped"},"match":{"location":"karate","arguments":[]},"keyword":"And","line":7},{"name":"method get","result":{"duration":0,"status":"skipped"},"match":{"location":"karate","arguments":[]},"keyword":"When","line":8},{"name":"status 200","result":{"duration":0,"status":"skipped"},"match":{"location":"karate","arguments":[]},"keyword":"Then","line":9},{"name":"match response == { counter: 0 }","result":{"duration":0,"status":"skipped"},"match":{"location":"karate","arguments":[]},"keyword":"And","line":10},{"name":"def waitUntil =","result":{"duration":0,"status":"skipped"},"match":{"location":"karate","arguments":[]},"keyword":"*","line":13,"doc_string":{"content_type":"","value":"function(x) {\n  while (true) {\n    var result = karate.call('get.feature');\n    var greeting = result.response;\n    karate.log('poll response', greeting); \/\/<\n    if (greeting.id >= x) {\n      karate.log('condition satisfied, exiting');\n      return;\n    }\n    karate.log('sleeping');\n    \/\/ uncomment \/ modify the sleep time as per your wish\n    \/\/ java.lang.Thread.sleep(1000);\n  }\n}","line":13}}]},{"line":39,"name":"using the karate retry syntax","description":"","id":"using-the-karate-retry-syntax","type":"scenario","keyword":"Scenario","steps":[{"name":"configure retry = { count: 5, interval: 0 }","result":{"duration":0,"status":"skipped"},"match":{"location":"karate","arguments":[]},"keyword":"*","line":42},{"name":"url demoBaseUrl","result":{"duration":0,"status":"skipped"},"match":{"location":"karate","arguments":[]},"keyword":"Given","line":43},{"name":"path 'greeting'","result":{"duration":0,"status":"skipped"},"match":{"location":"karate","arguments":[]},"keyword":"And","line":44},{"name":"retry until responseStatus == 200 && response.id > 3","result":{"duration":0,"status":"skipped"},"match":{"location":"karate","arguments":[]},"keyword":"And","line":45},{"name":"method get","result":{"duration":0,"status":"skipped"},"match":{"location":"karate","arguments":[]},"keyword":"When","line":46}]}],"name":"src\/test\/java\/polling.feature","description":"demo of how to poll until a certain condition is met","id":"demo-of-how-to-poll-until-a-certain-condition-is-met","keyword":"Feature","uri":"src\/test\/java\/polling.feature","tags":[{"name":"@mock-servlet-todo","line":1}]}]